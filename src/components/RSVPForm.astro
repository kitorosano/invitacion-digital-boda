---
interface Props {
  deadline: Date;
  isAvailable?: boolean;
  toastDuration?: number;
}

const { deadline, isAvailable, toastDuration = 3000 } = Astro.props;

const deadlineLocaleString = deadline.toLocaleDateString("es-ES", {
  month: "long",
  day: "numeric",
});
---

{
  isAvailable ? (
    <form class="rsvp-container">
      <h2>Confirmar Asistencia</h2>
      <p>
        Por favor, confirma tu asistencia hasta el{" "}
        <span>{deadlineLocaleString}</span>. ¡Esperamos que puedas estar!
      </p>

      <div class="rsvp-options">
        <label for="rsvp-yes">
          <input type="radio" name="rsvp" id="rsvp-yes" value="si" required />
          Sí, allí estaré!
        </label>

        <label for="rsvp-no">
          <input type="radio" name="rsvp" id="rsvp-no" value="no" required />
          No podré asistir
        </label>
      </div>

      <div class="rsvp-fields">
        <input
          name="name"
          type="text"
          placeholder="Nombre y apellido"
          required
        />
        <input
          hidden
          name="email"
          type="email"
          placeholder="Correo electrónico"
        />
        <input
          class="hidden"
          name="song"
          type="text"
          placeholder="¿Qué canción no puede faltar?"
        />
        <textarea
          name="message"
          placeholder="Déjanos un mensajito..."
          rows="4"
        />
      </div>

      <button disabled type="submit">
        Enviar Respuesta
      </button>

      <div class="toast-container" data-duration={toastDuration}>
        <div class="toast-content">
          <span class="toast-message">¡Gracias por confirmar tu reserva!</span>
        </div>
        <div class="toast-progress" />
      </div>
    </form>
  ) : (
    <div class="rsvp-container">
      <h2>Confirmar Asistencia</h2>
      <p>El formulario de confirmación de asistencia está cerrado.</p>
    </div>
  )
}

<style>
  .rsvp-container {
    width: 100%;
    margin: 3rem 0 0 0;
    padding: 0.5rem 0;

    text-align: center;
  }

  .rsvp-container > h2 {
    margin: 0 auto;

    font-size: var(--text-size-lg);
    font-weight: 600;
    color: var(--color-dark);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .rsvp-container > p {
    margin: 1rem auto 0 auto;

    font-size: var(--text-size-md);
    font-weight: 400;
    color: var(--color-dark);

    max-width: 70%;
    text-wrap: balance;
    line-height: 1.5;
    letter-spacing: 0.02em;
  }

  .rsvp-container > p span {
    font-weight: 600;
  }

  .rsvp-options {
    margin: 1rem auto 0 auto;

    display: flex;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .rsvp-options label {
    padding: 1rem 0;
    font-size: var(--text-size-md);
    font-weight: 400;
    letter-spacing: 0.02em;
    color: var(--color-dark);
    cursor: pointer;
    user-select: none;
  }

  .rsvp-options input[type="radio"] {
    margin-right: 0.5rem;
    accent-color: var(--color-dark);
    cursor: pointer;
  }

  .rsvp-fields {
    margin: 0 auto;
    padding: 0.5rem 0;

    display: flex;
    justify-content: center;
    gap: 0.4rem;
    flex-wrap: wrap;
  }

  .rsvp-fields input {
    width: 80%;
    height: 1.2rem;
    padding: 0.6rem 1rem;

    font-size: var(--text-size-md);
    font-weight: 400;
    font-style: italic;
    font-family: var(--font-primary);
    letter-spacing: 0.02em;

    color: var(--color-dark);
    border: none;
    border-radius: 5px;

    background: #fafafa;
    opacity: 1;
    transition: all 0.4s ease;
  }

  .rsvp-fields textarea {
    width: 80%;
    padding: 0.6rem 1rem;

    font-size: var(--text-size-md);
    font-weight: 400;
    font-style: italic;
    font-family: var(--font-primary);
    letter-spacing: 0.02em;

    color: var(--color-dark);
    border: none;
    border-radius: 5px;
    resize: none;

    background: #fafafa;
  }

  .rsvp-fields input[name="name"] {
    font-style: normal;
  }

  .rsvp-fields input.hidden {
    height: 0.01rem;
    padding: 0;
    opacity: 0;
    pointer-events: none;
  }

  .rsvp-fields input::placeholder,
  .rsvp-fields textarea::placeholder {
    font-weight: 300;
  }

  .rsvp-fields input:focus,
  .rsvp-fields textarea:focus {
    outline: 1px solid var(--color-dark);
  }

  .rsvp-container button {
    margin: 1rem auto 0 auto;
    padding: 0.6rem 2rem;

    font-size: var(--text-size-sm);
    color: var(--color-light);
    letter-spacing: 0.02em;
    text-transform: uppercase;
    background-color: var(--color-dark);

    border: none;
    border-radius: 5px;

    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .rsvp-container button:hover {
    background-color: var(--color-dark-hover);
  }

  .rsvp-container button:disabled {
    background-color: #fafafa;
    color: var(--color-grey);
    cursor: not-allowed;
  }

  .toast-container {
    position: fixed;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;

    display: flex;
    justify-content: center;
    align-items: center;

    width: 90%;
    height: auto;
    border-radius: 5px;
    overflow: hidden;

    background: var(--color-grey);
    color: var(--color-dark);

    opacity: 0;
    pointer-events: none;
    transition: opacity 0.4s ease;
  }

  .toast-container.show {
    opacity: 1;
    pointer-events: auto;
    animation: slideDown 0.5s ease;
  }

  .toast-content {
    padding: 1rem 2rem;
    z-index: 1001;
  }

  .toast-message {
    font-size: 1rem;
    font-weight: 400;
    letter-spacing: 0.02rem;
    text-align: center;
  }

  .toast-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 5px;
    width: 100%;
    background: var(--color-dark);
    transition: width linear;
    z-index: 1000;
  }

  @keyframes slideDown {
    from {
      transform: translate(-50%, -100%);
    }
    to {
      transform: translate(-50%, 0);
    }
  }

  @media (min-width: 768px) {
  }

  @media (min-width: 1024px) {
    .rsvp-container {
      margin: 6rem 0 0 0;
    }

    .rsvp-container > h2 {
      font-size: var(--text-size-xl);
    }

    .rsvp-container > p {
      margin: 2rem auto 0 auto;
    }

    .rsvp-options label {
      display: inline-flex;
      align-items: center;
      margin: 0 1rem;
    }

    .rsvp-options label:hover input[type="radio"] {
      transform: scale(1.5);
    }

    .rsvp-options input[type="radio"] {
      margin-right: 1rem;
      transform: scale(1.2);
      transition: transform 0.2s ease;
    }

    .rsvp-fields input,
    .rsvp-fields textarea {
      width: 60%;
      padding: 1rem 1.2rem;
    }

    .rsvp-container button {
      padding: 0.8rem 2.5rem;
    }

    .toast-container {
      width: auto;
      left: auto;
      right: 2rem;
      transform: translateX(0);
    }

    .toast-content {
      padding: 1.5rem 2rem;
    }

    .toast-message {
      font-size: 1.2rem;
    }

    @keyframes slideDown {
      from {
        transform: translate(0, -100%);
      }
      to {
        transform: translate(0, 0);
      }
    }
  }

  @media (min-width: 1440px) {
    .rsvp-container {
      margin: 10rem 0 0 0;
    }

    .rsvp-options {
      margin: 2rem auto 0 auto;
    }
    

    .rsvp-options label:hover input[type="radio"] {
      transform: scale(2);
    }

    .rsvp-options input[type="radio"] {
      transform: scale(1.7);
    }

    .rsvp-fields input,
    .rsvp-fields textarea {
      padding: 1.2rem 1.5rem;
    }

    .rsvp-container button {
      padding: 1rem 3rem;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const $BODY = document.querySelector("body") as HTMLBodyElement;
    const $FORM = document.querySelector("form") as HTMLFormElement;
    const $RADIO_YES = $FORM.querySelector(
      'input[id="rsvp-yes"]',
    ) as HTMLInputElement;
    const $RADIO_NO = $FORM.querySelector(
      'input[id="rsvp-no"]',
    ) as HTMLInputElement;
    const $INPUT_NAME = $FORM.querySelector(
      'input[name="name"]',
    ) as HTMLInputElement;
    const $INPUT_SONG = $FORM.querySelector(
      'input[name="song"]',
    ) as HTMLInputElement;
    const $BUTTON = $FORM.querySelector("button") as HTMLButtonElement;
    const $TOAST = document.querySelector(".toast-container") as HTMLDivElement;
    const $TOAST_MESSAGE = $TOAST.querySelector(
      ".toast-message",
    ) as HTMLSpanElement;
    const $TOAST_PROGRESS = $TOAST.querySelector(
      ".toast-progress",
    ) as HTMLDivElement;
    const duration = Number($TOAST.dataset.duration);

    $RADIO_YES.addEventListener("change", () => {
      $INPUT_SONG.classList.remove("hidden");
    });
    $RADIO_NO.addEventListener("change", () => {
      $INPUT_SONG.classList.add("hidden");
    });

    $FORM.addEventListener("submit", async (event) => {
      event.preventDefault();

      $BUTTON.disabled = true;
      $BODY.style.cursor = "progress";
      const formData = new FormData($FORM);
      await handleFetch(formData);

      $FORM.reset();
      $BUTTON.disabled = false;
      $BODY.style.cursor = "auto";
    });

    $INPUT_NAME.addEventListener("input", () => {
      if ($INPUT_NAME.value.trim() === "") {
        $BUTTON.disabled = true;
        return;
      }
      if ($INPUT_NAME.value.length < 3) {
        $BUTTON.disabled = true;
        return;
      }
      $BUTTON.disabled = false;
    });

    const handleFetch = async (formData: FormData) => {
      try {
        const response = await fetch("/api/rsvp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify(Object.fromEntries(formData)),
        });

        const data = await response.json();
        showToast(data.message);
      } catch (error) {
        showToast(
          "Ha ocurrido un error. Por favor, inténtalo de nuevo más tarde.",
        );
      }
    };

    const showToast = (message: string) => {
      $TOAST_MESSAGE.textContent = message;
      $TOAST.classList.add("show");
      $TOAST_PROGRESS.style.transitionDuration = `${duration / 1000}s`;
      $TOAST_PROGRESS.style.width = "0%";

      setTimeout(() => {
        $TOAST.classList.remove("show");

        setTimeout(() => {
          $TOAST_PROGRESS.style.width = "100%";
        }, 1000);
      }, duration);
    };
  });
</script>
